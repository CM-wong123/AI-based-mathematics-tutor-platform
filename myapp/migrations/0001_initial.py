# Generated by Django 5.1.7 on 2025-03-28 14:13

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.AutoField(db_column='question_id', primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('Arithmetic', 'Arithmetic'), ('Trigonometry', 'Trigonometry'), ('Algebra', 'Algebra'), ('Geometry', 'Geometry'), ('Calculus', 'Calculus')], max_length=50)),
                ('question_text', models.TextField()),
                ('correct_answer', models.CharField(max_length=255)),
                ('difficulty_level', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'questions',
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('quiz_id', models.AutoField(db_column='quiz_id', primary_key=True, serialize=False)),
                ('quiz_title', models.CharField(max_length=255)),
                ('total_marks', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'quiz',
            },
        ),
        migrations.CreateModel(
            name='QuizSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('Arithmetic', 'Arithmetic'), ('Trigonometry', 'Trigonometry'), ('Algebra', 'Algebra'), ('Geometry', 'Geometry'), ('Calculus', 'Calculus')], max_length=50)),
                ('difficulty', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], max_length=10)),
                ('ai_generated', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'quiz_system',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('firstName', models.CharField(max_length=100)),
                ('lastName', models.CharField(max_length=100)),
                ('fullName', models.CharField(blank=True, max_length=255, null=True)),
                ('password', models.CharField(max_length=100)),
                ('role', models.CharField(max_length=50)),
                ('academicLevel', models.TextField()),
                ('userStatus', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='student_profile', serialize=False, to='myapp.user')),
                ('grade_level', models.CharField(max_length=50)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='myapp.user')),
            ],
            options={
                'db_table': 'students',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('teacher', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='myapp.user')),
                ('subject', models.CharField(max_length=100)),
                ('experience', models.IntegerField()),
            ],
            options={
                'db_table': 'teachers',
            },
        ),
        migrations.CreateModel(
            name='StudentExam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0)),
                ('taken_at', models.DateTimeField(auto_now_add=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.student')),
            ],
            options={
                'db_table': 'student_exams',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_answer', models.CharField(max_length=255)),
                ('is_correct', models.BooleanField(default=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.question')),
                ('student_exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.studentexam')),
            ],
            options={
                'db_table': 'answers',
            },
        ),
        migrations.CreateModel(
            name='AIAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('Arithmetic', 'Arithmetic'), ('Trigonometry', 'Trigonometry'), ('Algebra', 'Algebra'), ('Geometry', 'Geometry'), ('Calculus', 'Calculus')], max_length=50)),
                ('score_percentage', models.FloatField(default=0.0)),
                ('improvement_tips', models.TextField()),
                ('student_exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.studentexam')),
            ],
            options={
                'db_table': 'ai_analysis',
            },
        ),
        migrations.CreateModel(
            name='Doubt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Answered', 'Answered')], default='Pending', max_length=10)),
                ('ai_response', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.student')),
            ],
            options={
                'db_table': 'doubts',
            },
        ),
        migrations.AddField(
            model_name='quiz',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.teacher'),
        ),
        migrations.AddField(
            model_name='question',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.teacher'),
        ),
        migrations.CreateModel(
            name='ParentStudentMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_children', to='myapp.user')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_mappings', to='myapp.student')),
            ],
            options={
                'db_table': 'parent_student_mapping',
                'unique_together': {('parent', 'student')},
            },
        ),
    ]
